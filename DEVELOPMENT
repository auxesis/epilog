
== Storage backends

Some crafty refactoring has made it really easy to write 
different storage backends.

A storage backend is used by passing it to the watcher (it's probably
going to have some settings set before you do this). The watcher will 
break up lines and pass them as a 'data' object to the storage object 
with a @storage.commit. 

To write your own storage mechanism, just make sure your class
has a commit method that accepts a hash. 

An interesting storage mechanisms would be something that turns the
hash into a yaml fragment, and every 10 or so fragments does a http
POST. This would be the beginnings a remote watcher/central aggregator
system. 


== TODO
 - properly daemonise the aggregators
=== watcher
 - keep track of lines better in the watcher so we know where we are 
   in the file, and if the file has been overwritten
    - note line number (each_with_index will help)
    - take md5sum of first line and check it often!
 - be more clever about determining the year of the log entry with 
   log files that span multiple years
=== filter
 - check the log format of the line and apply a filter appropriately 
 - have filters for different log formats (not just rfc3164)
 - integrate with the watcher

